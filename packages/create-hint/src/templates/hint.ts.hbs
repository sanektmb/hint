/**
 * @fileoverview {{hint.description}}
 */

import { HintContext } from 'hint/dist/src/lib/hint-context';
// The list of types depends on the events you want to capture.
import { IHint, {{hint.events}} } from 'hint/dist/src/lib/types';
import { debug as d } from '@hint/utils-debug';
import { Severity } from '@hint/utils-types';

import meta from './meta{{#if hint.parentName}}/{{hint.normalizedName}}{{/if}}';
{{#if packageData.official}}

import { getMessage } from './i18n.import';{{/if}}

const debug: debug.IDebugger = d(__filename);

/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */

export default class {{hint.className}} implements IHint {

    public static readonly meta = meta;

    public constructor(context: HintContext) {

        // Your code here.
{{#hint.useCase.dom}}
        const validateElement = async (elementFound: ElementFound) => {
            // Code to validate the hint on the event when an element is visited.

            {{>event-code event="elementFound"}}
        };
{{/hint.useCase.dom}}
{{#hint.useCase.request}}
        const validateFetchStart = async (fetchStart: FetchStart) => {
            // Code to validate the hint on the event fetch::start.

            {{>event-code event="fetchStart"}}
        };
        const validateFetchEnd = async (fetchEnd: FetchEnd) => {
            // Code to validate the hint on the event fetch::end::*.

            {{>event-code event="fetchEnd"}}
        };
        const validateFetchError = async (fetchError: FetchError) => {
            // Code to validate the hint on the event fetch::error.

            {{>event-code event="fetchError"}}
        };
{{/hint.useCase.request}}
{{#hint.useCase.thirdPartyService}}
        const validateFetchStart = async (fetchStart: FetchStart) => {
            // Code to validate the hint on the event fetch::start.

            {{>event-code event="fetchStart"}}
        };
        const validateFetchEnd = async (fetchEnd: FetchEnd) => {
            // Code to validate the hint on the event fetch::end::*.

            {{>event-code event="fetchEnd"}}
        };
{{/hint.useCase.thirdPartyService}}
{{#hint.useCase.jsInjection}}
        const validateScanEnd = async (scanEnd: ScanEnd) => {
            const jsCode = 'var a = 1 + 1;';
            const result = await context.evaluate(jsCode);

            return;
        };
{{/hint.useCase.jsInjection}}

{{#hint.useCase.dom}}
        context.on('element::{{hint.elementType}}', validateElement);
        {{/hint.useCase.dom}}
{{#hint.useCase.request}}
        context.on('fetch::end::*', validateFetchEnd);
        context.on('fetch::error', validateFetchError);
        context.on('fetch::start', validateFetchStart);
{{/hint.useCase.request}}
{{#hint.useCase.thirdPartyService}}
        context.on('fetch::end::*', validateFetchEnd);
        context.on('fetch::start', validateFetchStart);
{{/hint.useCase.thirdPartyService}}
{{#hint.useCase.jsInjection}}
        context.on('scan::end', validateScanEnd);
{{/hint.useCase.jsInjection}}
        // As many events as you need
    }
}
