import * as proxyquire from 'proxyquire';
import * as sinon from 'sinon';
import anyTest, { TestFn } from 'ava';
import { EventEmitter2 } from 'eventemitter2';

type SandboxContext = {
    sandbox: sinon.SinonSandbox;
};

const test = anyTest as TestFn<SandboxContext>;

const mockContext = () => {
    const engine = new EventEmitter2({
        delimiter: '::',
        maxListeners: 0,
        wildcard: true
    }) as Engine<{{capitalizedName}}Events>;

    const script = proxyquire('../src/{{normalizedName}}', {
        // Dependecies you need to stub/spy/mock.
    });

    return { 
        engine
        {{capitalizedName}}: script.default
    };
};

test.beforeEach((t) => {
    t.context.sandbox = sinon.sandbox;
});

test.afterEach.always((t) => {
    t.context.sandbox.restore();
});

{{#each events}}
test('Test for event {{event}}', async (t) => {
    const { {{../capitalizedName}} } = mockContext();
    const parser = new {{../capitalizedName}}(t.context.engine); // eslint-disable-line new-cap
    // Code to prepare your test.

    await t.context.engine.emitAsync('{{event}}', { /* testing data */ });

    // Code to check if everything is ok.
});
{{#unless @last}}

{{/unless}}
{{/each}}
